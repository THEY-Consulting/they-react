import { DefaultValues, FieldError, FieldPath, FieldValues, Path, RegisterOptions, UseControllerProps } from 'react-hook-form';
import { DynamicFormField, ErrorResponse, FormGroup, InputFieldOption, InputFieldOptionGroup, InputFieldOptions, ValidationError } from './types';
import { TFunction } from 'i18next';
export declare const notUndefined: <T>(value: T | undefined) => value is T;
export declare const getRequiredLabel: (label?: string, required?: boolean, disabled?: boolean) => string;
export declare const isFieldWithInitial: <T extends FieldValues>(field: DynamicFormField<T>) => field is DynamicFormField<T> & {
    initial: string | number | undefined;
};
export declare const isOptionGroup: <T>(option: InputFieldOption<T>) => option is InputFieldOptionGroup;
export declare const getOptionLabel: <T extends FieldValues>(options: InputFieldOptions<T>, value: string) => string;
export declare const toArrayValue: (value: string | string[]) => string[];
export declare const mapFieldGroups: <T extends FieldValues>(fields: FormGroup<T>[], required?: boolean) => {
    fields: ({
        rules: Omit<RegisterOptions<T, Path<T>>, "disabled" | "valueAsNumber" | "valueAsDate" | "setValueAs"> | undefined;
        name: Path<T>;
        label?: string;
        size?: "small" | "medium";
        required?: boolean;
        disabled?: boolean;
        readonly?: boolean;
        hidden?: boolean;
        sx?: import('@mui/system').SxProps;
        xs?: number | "auto" | true;
        sm?: number | "auto" | true;
        md?: number | "auto" | true;
        lg?: number | "auto" | true;
        xl?: number | "auto" | true;
        align?: "flex-start" | "center" | "flex-end" | "stretch" | "baseline";
        type: "boolean";
        initial?: boolean;
    } | {
        rules: Omit<RegisterOptions<T, Path<T>>, "disabled" | "valueAsNumber" | "valueAsDate" | "setValueAs"> | undefined;
        name: Path<T>;
        label?: string;
        size?: "small" | "medium";
        required?: boolean;
        disabled?: boolean;
        readonly?: boolean;
        hidden?: boolean;
        sx?: import('@mui/system').SxProps;
        xs?: number | "auto" | true;
        sm?: number | "auto" | true;
        md?: number | "auto" | true;
        lg?: number | "auto" | true;
        xl?: number | "auto" | true;
        align?: "flex-start" | "center" | "flex-end" | "stretch" | "baseline";
        type: "date" | "time";
        initial?: string;
        timezone?: string;
    } | {
        rules: Omit<RegisterOptions<T, Path<T>>, "disabled" | "valueAsNumber" | "valueAsDate" | "setValueAs"> | undefined;
        name: Path<T>;
        label?: string;
        size?: "small" | "medium";
        required?: boolean;
        disabled?: boolean;
        readonly?: boolean;
        hidden?: boolean;
        sx?: import('@mui/system').SxProps;
        xs?: number | "auto" | true;
        sm?: number | "auto" | true;
        md?: number | "auto" | true;
        lg?: number | "auto" | true;
        xl?: number | "auto" | true;
        align?: "flex-start" | "center" | "flex-end" | "stretch" | "baseline";
        type: "currency";
        initial?: number | string;
    } | {
        rules: Omit<RegisterOptions<T, Path<T>>, "disabled" | "valueAsNumber" | "valueAsDate" | "setValueAs"> | undefined;
        name: Path<T>;
        label?: string;
        size?: "small" | "medium";
        required?: boolean;
        disabled?: boolean;
        readonly?: boolean;
        hidden?: boolean;
        sx?: import('@mui/system').SxProps;
        xs?: number | "auto" | true;
        sm?: number | "auto" | true;
        md?: number | "auto" | true;
        lg?: number | "auto" | true;
        xl?: number | "auto" | true;
        align?: "flex-start" | "center" | "flex-end" | "stretch" | "baseline";
        type: "url";
        initial?: string;
    } | {
        rules: Omit<RegisterOptions<T, Path<T>>, "disabled" | "valueAsNumber" | "valueAsDate" | "setValueAs"> | undefined;
        name: Path<T>;
        label?: string;
        size?: "small" | "medium";
        required?: boolean;
        disabled?: boolean;
        readonly?: boolean;
        hidden?: boolean;
        sx?: import('@mui/system').SxProps;
        xs?: number | "auto" | true;
        sm?: number | "auto" | true;
        md?: number | "auto" | true;
        lg?: number | "auto" | true;
        xl?: number | "auto" | true;
        align?: "flex-start" | "center" | "flex-end" | "stretch" | "baseline";
        type: "string";
        clearable?: boolean;
        startAdornment?: import('../../../node_modules/react').ReactNode;
        endAdornment?: import('../../../node_modules/react').ReactNode;
        initial?: string;
    } | {
        rules: Omit<RegisterOptions<T, Path<T>>, "disabled" | "valueAsNumber" | "valueAsDate" | "setValueAs"> | undefined;
        name: Path<T>;
        label?: string;
        size?: "small" | "medium";
        required?: boolean;
        disabled?: boolean;
        readonly?: boolean;
        hidden?: boolean;
        sx?: import('@mui/system').SxProps;
        xs?: number | "auto" | true;
        sm?: number | "auto" | true;
        md?: number | "auto" | true;
        lg?: number | "auto" | true;
        xl?: number | "auto" | true;
        align?: "flex-start" | "center" | "flex-end" | "stretch" | "baseline";
        type: "number";
        startAdornment?: import('../../../node_modules/react').ReactNode;
        endAdornment?: import('../../../node_modules/react').ReactNode;
        initial?: number | string;
    } | {
        rules: Omit<RegisterOptions<T, Path<T>>, "disabled" | "valueAsNumber" | "valueAsDate" | "setValueAs"> | undefined;
        name: Path<T>;
        label?: string;
        size?: "small" | "medium";
        required?: boolean;
        disabled?: boolean;
        readonly?: boolean;
        hidden?: boolean;
        sx?: import('@mui/system').SxProps;
        xs?: number | "auto" | true;
        sm?: number | "auto" | true;
        md?: number | "auto" | true;
        lg?: number | "auto" | true;
        xl?: number | "auto" | true;
        align?: "flex-start" | "center" | "flex-end" | "stretch" | "baseline";
        type: "password";
    } | {
        rules: Omit<RegisterOptions<T, Path<T>>, "disabled" | "valueAsNumber" | "valueAsDate" | "setValueAs"> | undefined;
        name: Path<T>;
        label?: string;
        size?: "small" | "medium";
        required?: boolean;
        disabled?: boolean;
        readonly?: boolean;
        hidden?: boolean;
        sx?: import('@mui/system').SxProps;
        xs?: number | "auto" | true;
        sm?: number | "auto" | true;
        md?: number | "auto" | true;
        lg?: number | "auto" | true;
        xl?: number | "auto" | true;
        align?: "flex-start" | "center" | "flex-end" | "stretch" | "baseline";
        type: "select";
        options: InputFieldOptions<T>;
        autocomplete?: boolean;
        fitContent?: boolean;
        filterOptions?: ((options: T[Path<T>][], state: import('@mui/material').FilterOptionsState<T[Path<T>]>) => T[Path<T>][]) | undefined;
        renderOption?: ((props: React.HTMLAttributes<HTMLLIElement> & {
            key?: string;
        }, option: T[Path<T>], state: import('@mui/material').AutocompleteRenderOptionState, ownerState: import('@mui/material').AutocompleteOwnerState<T[Path<T>], false, false, false>) => import('../../../node_modules/react').ReactNode) | undefined;
        startAdornment?: import('../../../node_modules/react').ReactNode;
        initial?: number | string;
    } | {
        rules: Omit<RegisterOptions<T, Path<T>>, "disabled" | "valueAsNumber" | "valueAsDate" | "setValueAs"> | undefined;
        name: Path<T>;
        label?: string;
        size?: "small" | "medium";
        required?: boolean;
        disabled?: boolean;
        readonly?: boolean;
        hidden?: boolean;
        sx?: import('@mui/system').SxProps;
        xs?: number | "auto" | true;
        sm?: number | "auto" | true;
        md?: number | "auto" | true;
        lg?: number | "auto" | true;
        xl?: number | "auto" | true;
        align?: "flex-start" | "center" | "flex-end" | "stretch" | "baseline";
        type: "chipselect";
        options: InputFieldOptions<T>;
        startAdornment?: import('../../../node_modules/react').ReactNode;
        initial?: number | string;
    } | {
        rules: Omit<RegisterOptions<T, Path<T>>, "disabled" | "valueAsNumber" | "valueAsDate" | "setValueAs"> | undefined;
        name: Path<T>;
        label?: string;
        size?: "small" | "medium";
        required?: boolean;
        disabled?: boolean;
        readonly?: boolean;
        hidden?: boolean;
        sx?: import('@mui/system').SxProps;
        xs?: number | "auto" | true;
        sm?: number | "auto" | true;
        md?: number | "auto" | true;
        lg?: number | "auto" | true;
        xl?: number | "auto" | true;
        align?: "flex-start" | "center" | "flex-end" | "stretch" | "baseline";
        type: "buttonselect";
        options: InputFieldOptions<T>;
        spacing?: number;
        initial?: number | string;
    } | {
        rules: Omit<RegisterOptions<T, Path<T>>, "disabled" | "valueAsNumber" | "valueAsDate" | "setValueAs"> | undefined;
        name: Path<T>;
        label?: string;
        size?: "small" | "medium";
        required?: boolean;
        disabled?: boolean;
        readonly?: boolean;
        hidden?: boolean;
        sx?: import('@mui/system').SxProps;
        xs?: number | "auto" | true;
        sm?: number | "auto" | true;
        md?: number | "auto" | true;
        lg?: number | "auto" | true;
        xl?: number | "auto" | true;
        align?: "flex-start" | "center" | "flex-end" | "stretch" | "baseline";
        type: "multiline";
        rows?: number;
        maxRows?: number;
        minRows?: number;
        initial?: string;
    } | {
        rules: Omit<RegisterOptions<T, Path<T>>, "disabled" | "valueAsNumber" | "valueAsDate" | "setValueAs"> | undefined;
        name: Path<T>;
        label?: string;
        size?: "small" | "medium";
        required?: boolean;
        disabled?: boolean;
        readonly?: boolean;
        hidden?: boolean;
        sx?: import('@mui/system').SxProps;
        xs?: number | "auto" | true;
        sm?: number | "auto" | true;
        md?: number | "auto" | true;
        lg?: number | "auto" | true;
        xl?: number | "auto" | true;
        align?: "flex-start" | "center" | "flex-end" | "stretch" | "baseline";
        type: "button";
        startIcon?: import('../../../node_modules/react').ReactNode;
    } | {
        rules: Omit<RegisterOptions<T, Path<T>>, "disabled" | "valueAsNumber" | "valueAsDate" | "setValueAs"> | undefined;
        name: Path<T>;
        label?: string;
        size?: "small" | "medium";
        required?: boolean;
        disabled?: boolean;
        readonly?: boolean;
        hidden?: boolean;
        sx?: import('@mui/system').SxProps;
        xs?: number | "auto" | true;
        sm?: number | "auto" | true;
        md?: number | "auto" | true;
        lg?: number | "auto" | true;
        xl?: number | "auto" | true;
        align?: "flex-start" | "center" | "flex-end" | "stretch" | "baseline";
        type: "divider";
    } | {
        rules: Omit<RegisterOptions<T, Path<T>>, "disabled" | "valueAsNumber" | "valueAsDate" | "setValueAs"> | undefined;
        name: Path<T>;
        label?: string;
        size?: "small" | "medium";
        required?: boolean;
        disabled?: boolean;
        readonly?: boolean;
        hidden?: boolean;
        sx?: import('@mui/system').SxProps;
        xs?: number | "auto" | true;
        sm?: number | "auto" | true;
        md?: number | "auto" | true;
        lg?: number | "auto" | true;
        xl?: number | "auto" | true;
        align?: "flex-start" | "center" | "flex-end" | "stretch" | "baseline";
        type: "list";
        fields: DynamicFormField<T>[];
        newEntry?: T[Path<T>] | undefined;
        getLabel?: (index: number, name: string) => import('../../../node_modules/react').ReactNode;
        marginBottom?: number;
    })[];
    label?: string;
    size?: "small" | "medium";
    spacing?: number;
    marginBottom?: number;
    required?: boolean;
    accordion?: boolean;
    expanded?: boolean;
}[];
export declare const combineValidation: <T extends FieldValues>(rules: DynamicFormField<T>["rules"], validations: RegisterOptions<T>["validate"]) => DynamicFormField<T>["rules"];
export declare const isErrorResponse: (response: unknown) => response is ErrorResponse;
export declare const getRemainingCharacters: <T extends FieldValues>(rules?: UseControllerProps<T>["rules"], value?: T[FieldPath<T>]) => number | undefined;
export declare const getErrorMessage: <T extends FieldValues>(t: TFunction, errors: ValidationError[], path: FieldPath<T>, error?: FieldError, rules?: UseControllerProps<T>["rules"]) => string;
export declare const getDefaultValues: <T extends FieldValues>(fields: FormGroup<T>[], formData?: T) => DefaultValues<T>;
export declare const resolveDotNotation: <T extends FieldValues>(obj: DefaultValues<T>) => DefaultValues<T>;
